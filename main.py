from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
import httpx
import os
import json

app = FastAPI()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not VERIFY_TOKEN or not OPENROUTER_KEY or not PAGE_ACCESS_TOKEN or not GOOGLE_CREDS_JSON:
    print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("VERIFY_TOKEN:", bool(VERIFY_TOKEN))
    print("OPENROUTER_KEY:", bool(OPENROUTER_KEY))
    print("PAGE_ACCESS_TOKEN:", bool(PAGE_ACCESS_TOKEN))
    print("GOOGLE_CREDS_JSON:", bool(GOOGLE_CREDS_JSON))
    raise Exception("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON Google
try:
    google_creds = json.loads(GOOGLE_CREDS_JSON)
    print("‚úÖ GOOGLE_CREDS_JSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except Exception as e:
    raise Exception("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GOOGLE_CREDS_JSON") from e


@app.get("/")
def root():
    return {"status": "OK"}


@app.get("/webhook")
def verify_webhook(request: Request):
    args = request.query_params
    if args.get("hub.mode") == "subscribe" and args.get("hub.verify_token") == VERIFY_TOKEN:
        print("‚úÖ Webhook –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        return PlainTextResponse(content=args.get("hub.challenge"), status_code=200)
    return {"status": "Verification failed"}


@app.post("/webhook")
async def handle_webhook(request: Request):
    body = await request.json()
    print("üì© –ü–æ–ª—É—á–µ–Ω webhook:", json.dumps(body, indent=2, ensure_ascii=False))

    try:
        for entry in body.get("entry", []):
            if "messaging" not in entry:
                continue
            for message_event in entry["messaging"]:
                sender_id = message_event["sender"]["id"]
                if "message" in message_event and "text" in message_event["message"]:
                    user_message = message_event["message"]["text"]
                    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}: {user_message}")

                    reply = await ask_gpt(user_message)
                    await send_reply_to_instagram(sender_id, reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:", e)

    return {"status": "ok"}


async def ask_gpt(user_message: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "HTTP-Referer": "https://photonewborn.taplink.ws",
        "X-Title": "Newborn Assistant"
    }

    payload = {
        "model": "openrouter/openai/gpt-4o",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. "
                    "–£ —Ç–µ–±—è —É—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç. "
                    "–¢—ã –≤–µ–¥—ë—à—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ –ø—Ä–æ–¥–∞–∂: –∏–Ω—Ç–µ—Ä–µ—Å ‚Üí –ø—Ä–æ–≥—Ä–µ–≤ ‚Üí –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí –¥–æ–∂–∏–º. "
                    "–¢—ã –∑–∞–∫—Ä—ã–≤–∞–µ—à—å —Å—Ç—Ä–∞—Ö–∏ –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç). "
                    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ —Å—ä—ë–º–∫–∏ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. "
                    "–¢—ã –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—à—å —Ç–µ–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏, –º–µ–¥–∏—Ü–∏–Ω—ã, —Ä–µ–ª–∏–≥–∏–∏. "
                    "–¢—ã –æ–ø–∏—Ä–∞–µ—à—å—Å—è –Ω–∞ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–∏—Ä–æ–≤—ã—Ö —Ç–æ–ø-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–≤ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. "
                    "–û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, —Ç—ë–ø–ª—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º."
                )
            },
            {"role": "user", "content": user_message}
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)

    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", response.status_code, response.text)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    data = response.json()
    reply = data["choices"][0]["message"]["content"]
    print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenRouter:", reply)
    return reply


async def send_reply_to_instagram(user_id: str, message_text: str):
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": user_id},
        "message": {"text": message_text[:1000]}
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload)
        if response.status_code == 200:
            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Instagram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status_code, response.text)
