from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
import httpx
import os
import json
import gspread
from google.oauth2.service_account import Credentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ---
app = FastAPI()

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")
PAGE_ACCESS_TOKEN = os.getenv("PAGE_ACCESS_TOKEN")

if not VERIFY_TOKEN or not OPENROUTER_KEY or not PAGE_ACCESS_TOKEN:
    raise Exception("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: VERIFY_TOKEN, OPENROUTER_KEY –∏–ª–∏ PAGE_ACCESS_TOKEN")

# --- Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SPREADSHEET_ID = '146idlM2cg1mWuccNGCZNLxLZUNsqBTBVue460TZ9_kg'

def get_gsheet():
    creds = Credentials.from_service_account_file('creds.json', scopes=SCOPES)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(SPREADSHEET_ID)
    return sh.sheet1

def save_message_to_sheet(user_id, user_message, bot_reply):
    try:
        ws = get_gsheet()
        ws.append_row([user_id, user_message, bot_reply])
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:", e)

# --- –†–æ—É—Ç—ã ---
@app.get("/")
def root():
    return {"status": "OK"}

@app.get("/webhook")
def verify_webhook(request: Request):
    args = request.query_params
    if args.get("hub.mode") == "subscribe" and args.get("hub.verify_token") == VERIFY_TOKEN:
        return PlainTextResponse(content=args.get("hub.challenge"), status_code=200)
    return {"status": "Verification failed"}

@app.post("/webhook")
async def handle_webhook(request: Request):
    body = await request.json()
    print("üì© –ü–æ–ª—É—á–µ–Ω Webhook:", json.dumps(body, indent=2, ensure_ascii=False))

    try:
        for entry in body.get("entry", []):
            for message_event in entry.get("messaging", []):
                sender_id = message_event["sender"]["id"]
                if "message" in message_event and "text" in message_event["message"]:
                    user_message = message_event["message"]["text"]

                    # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT
                    reply = await ask_gpt(user_message)

                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ Instagram
                    await send_reply_to_instagram(sender_id, reply)

                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google –¢–∞–±–ª–∏—Ü—É
                    save_message_to_sheet(sender_id, user_message, reply)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:", e)

    return {"status": "ok"}

# --- –ò–ò-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenRouter ---
async def ask_gpt(user_message):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_KEY}",
        "HTTP-Referer": "https://photonewborn.taplink.ws",
        "X-Title": "Newborn Assistant"
    }

    payload = {
        "model": "openrouter/openai/gpt-4o",
        "messages": [
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. "
                    "–£ —Ç–µ–±—è —É—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç. "
                    "–¢—ã –≤–µ–¥—ë—à—å –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ü–µ–ø–æ—á–∫–µ –ø—Ä–æ–¥–∞–∂: –∏–Ω—Ç–µ—Ä–µ—Å ‚Üí –ø—Ä–æ–≥—Ä–µ–≤ ‚Üí –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí –¥–æ–∂–∏–º. "
                    "–¢—ã –∑–∞–∫—Ä—ã–≤–∞–µ—à—å —Å—Ç—Ä–∞—Ö–∏ –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –æ–ø—ã—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç). "
                    "–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ —Å—ä—ë–º–∫–∏ –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö. "
                    "–¢—ã –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—à—å —Ç–µ–º—ã –ø–æ–ª–∏—Ç–∏–∫–∏, –º–µ–¥–∏—Ü–∏–Ω—ã, —Ä–µ–ª–∏–≥–∏–∏. "
                    "–û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, —Ç—ë–ø–ª—ã–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º —Ç–æ–Ω–æ–º."
                )
            },
            {"role": "user", "content": user_message}
        ]
    }

    async with httpx.AsyncClient() as client:
        response = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)

    if response.status_code != 200:
        print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", response.status_code, response.text)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    data = response.json()
    return data["choices"][0]["message"]["content"]

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Instagram ---
async def send_reply_to_instagram(user_id, message_text):
    url = f"https://graph.facebook.com/v18.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    payload = {
        "recipient": {"id": user_id},
        "message": {"text": message_text[:1000]}
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, json=payload)
        if response.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", response.status_code, response.text)

# --- –ó–∞–ø—É—Å–∫ –Ω–∞ Railway ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.environ.get("PORT", 8000)))
